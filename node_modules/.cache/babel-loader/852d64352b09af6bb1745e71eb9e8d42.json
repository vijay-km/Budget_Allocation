{"ast":null,"code":"var _jsxFileName = \"/home/odin/frontend/ejtos-react_budget_app/src/context/AppContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react'; // 5. The reducer - this is used to update the state, based on the action\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppReducer = (state, action) => {\n  let budget = 0;\n\n  switch (action.type) {\n    case 'ADD_EXPENSE':\n      let total_budget = 0;\n      total_budget = state.expenses.reduce((previousExp, currentExp) => {\n        return previousExp + currentExp.cost;\n      }, 0);\n      total_budget = total_budget + action.payload.cost;\n      action.type = \"DONE\";\n\n      if (total_budget <= state.budget) {\n        total_budget = 0;\n        state.expenses.map(currentExp => {\n          if (currentExp.name === action.payload.name) {\n            currentExp.cost = action.payload.cost + currentExp.cost;\n          }\n\n          return currentExp;\n        });\n        return { ...state\n        };\n      } else {\n        alert(\"Cannot increase the allocation! Out of funds\");\n        return { ...state\n        };\n      }\n\n    case 'RED_EXPENSE':\n      const red_expenses = state.expenses.map(currentExp => {\n        if (currentExp.name === action.payload.name && currentExp.cost - action.payload.cost >= 0) {\n          currentExp.cost = currentExp.cost - action.payload.cost;\n          budget = state.budget + action.payload.cost;\n        }\n\n        return currentExp;\n      });\n      action.type = \"DONE\";\n      return { ...state,\n        expenses: [...red_expenses]\n      };\n\n    case 'DELETE_EXPENSE':\n      action.type = \"DONE\";\n      state.expenses.map(currentExp => {\n        if (currentExp.name === action.payload) {\n          budget = state.budget + currentExp.cost;\n          currentExp.cost = 0;\n        }\n\n        return currentExp;\n      });\n      action.type = \"DONE\";\n      return { ...state,\n        budget\n      };\n\n    case 'SET_BUDGET':\n      action.type = \"DONE\";\n      state.budget = action.payload;\n      return { ...state\n      };\n\n    case 'CHG_CURRENCY':\n      action.type = \"DONE\";\n      state.currency = action.payload;\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n}; // 1. Sets the initial state when the app loads\n\n_c = AppReducer;\nconst initialState = {\n  budget: 2000,\n  expenses: [{\n    id: \"Marketing\",\n    name: 'Marketing',\n    cost: 50\n  }, {\n    id: \"Finance\",\n    name: 'Finance',\n    cost: 300\n  }, {\n    id: \"Sales\",\n    name: 'Sales',\n    cost: 70\n  }, {\n    id: \"Human Resource\",\n    name: 'Human Resource',\n    cost: 40\n  }, {\n    id: \"IT\",\n    name: 'IT',\n    cost: 500\n  }],\n  currency: '£'\n}; // 2. Creates the context this is the thing our components import and use to get the state\n\nexport const AppContext = /*#__PURE__*/createContext(); // 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\n\nexport const AppProvider = props => {\n  _s();\n\n  // 4. Sets up the app state. takes a reducer, and an initial state\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  let remaining = 0;\n\n  if (state.expenses) {\n    const totalExpenses = state.expenses.reduce((total, item) => {\n      return total = total + item.cost;\n    }, 0);\n    remaining = state.budget - totalExpenses;\n  }\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      expenses: state.expenses,\n      budget: state.budget,\n      remaining: remaining,\n      dispatch,\n      currency: state.currency\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c2 = AppProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppReducer\");\n$RefreshReg$(_c2, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useReducer","AppReducer","state","action","budget","type","total_budget","expenses","reduce","previousExp","currentExp","cost","payload","map","name","alert","red_expenses","currency","initialState","id","AppContext","AppProvider","props","dispatch","remaining","totalExpenses","total","item","children"],"sources":["/home/odin/frontend/ejtos-react_budget_app/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\n\n// 5. The reducer - this is used to update the state, based on the action\nexport const AppReducer = (state, action) => {\n    let budget = 0;\n    switch (action.type) {\n        case 'ADD_EXPENSE':\n            let total_budget = 0;\n            total_budget = state.expenses.reduce(\n                (previousExp, currentExp) => {\n                    return previousExp + currentExp.cost\n                },0\n            );\n            total_budget = total_budget + action.payload.cost;\n            action.type = \"DONE\";\n            if(total_budget <= state.budget) {\n                total_budget = 0;\n                state.expenses.map((currentExp)=> {\n                    if(currentExp.name === action.payload.name) {\n                        currentExp.cost = action.payload.cost + currentExp.cost;\n                    }\n                    return currentExp\n                });\n                return {\n                    ...state,\n                };\n            } else {\n                alert(\"Cannot increase the allocation! Out of funds\");\n                return {\n                    ...state\n                }\n            }\n            case 'RED_EXPENSE':\n                const red_expenses = state.expenses.map((currentExp)=> {\n                    if (currentExp.name === action.payload.name && currentExp.cost - action.payload.cost >= 0) {\n                        currentExp.cost =  currentExp.cost - action.payload.cost;\n                        budget = state.budget + action.payload.cost\n                    }\n                    return currentExp\n                })\n                action.type = \"DONE\";\n                return {\n                    ...state,\n                    expenses: [...red_expenses],\n                };\n            case 'DELETE_EXPENSE':\n            action.type = \"DONE\";\n            state.expenses.map((currentExp)=> {\n                if (currentExp.name === action.payload) {\n                    budget = state.budget + currentExp.cost\n                    currentExp.cost =  0;\n                }\n                return currentExp\n            })\n            action.type = \"DONE\";\n            return {\n                ...state,\n                budget\n            };\n        case 'SET_BUDGET':\n            action.type = \"DONE\";\n            state.budget = action.payload;\n\n            return {\n                ...state,\n            };\n        case 'CHG_CURRENCY':\n            action.type = \"DONE\";\n            state.currency = action.payload;\n            return {\n                ...state\n            }\n\n        default:\n            return state;\n    }\n};\n\n// 1. Sets the initial state when the app loads\nconst initialState = {\n    budget: 2000,\n    expenses: [\n        { id: \"Marketing\", name: 'Marketing', cost: 50 },\n        { id: \"Finance\", name: 'Finance', cost: 300 },\n        { id: \"Sales\", name: 'Sales', cost: 70 },\n        { id: \"Human Resource\", name: 'Human Resource', cost: 40 },\n        { id: \"IT\", name: 'IT', cost: 500 },\n    ],\n    currency: '£'\n};\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = (props) => {\n    // 4. Sets up the app state. takes a reducer, and an initial state\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n    let remaining = 0;\n\n    if (state.expenses) {\n            const totalExpenses = state.expenses.reduce((total, item) => {\n            return (total = total + item.cost);\n        }, 0);\n        remaining = state.budget - totalExpenses;\n    }\n    \n\n    return (\n        <AppContext.Provider\n            value={{\n                expenses: state.expenses,\n                budget: state.budget,\n                remaining: remaining,\n                dispatch,\n                currency: state.currency\n            }}\n        >\n            {props.children}\n        </AppContext.Provider>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}